{"version":3,"sources":["components/CharacterSearch.js","components/Character.js","components/CharacterList.js","pages/Index.js","serviceWorker.js","index.js"],"names":["CharacterSearch","className","onChange","this","props","type","name","id","placeholder","React","Component","Character","character","info","Fragment","src","image","alt","status","species","CharacterList","data","map","key","Index","state","loading","error","results","page","componentDidMount","getCharacters","a","fetch","response","ok","json","setState","handleClick","event","preventDefault","handleChange","query","target","value","role","aria-label","href","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"yPAwBeA,G,6KAlBX,OACE,6BAASC,UAAU,8BACjB,8BACE,6BACE,2BACEC,SAAUC,KAAKC,MAAMF,SACrBG,KAAK,SACLC,KAAK,QACLC,GAAG,QACHC,YAAY,kB,GAXIC,IAAMC,YCkBrBC,E,uKAlBX,IAAMC,EAAYT,KAAKC,MAAMS,KAE7B,OACE,kBAAC,IAAMC,SAAP,KACE,6BAASb,UAAU,mBACjB,yBAAKA,UAAU,yBACb,yBAAKc,IAAKH,EAAUI,MAAOC,IAAKL,EAAUN,QAE5C,yBAAKL,UAAU,wBACb,4BAAKW,EAAUN,MACf,8BAAOM,EAAUM,QAFnB,MAEoC,8BAAON,EAAUO,gB,GAZvCV,IAAMC,WCoBfU,E,uKAjBH,IACAC,EAASlB,KAAKC,MAAdiB,KAER,OACE,kBAAC,IAAMP,SAAP,KACGO,EAAKC,KAAI,SAACV,GACT,OACE,yBAAKW,IAAKX,EAAUL,IAClB,kBAAC,EAAD,CAAWM,KAAMD,a,GATHH,IAAMC,WCkGnBc,G,kNA9FbC,MAAQ,CACNC,SAAS,EACTC,MAAO,KACPC,QAAS,GACTC,KAAM,G,EAGRC,kBAAoB,WAClB,EAAKC,iB,EAGPA,c,sBAAgB,8BAAAC,EAAA,sEACSC,MAAM,mDAAD,OACyB,EAAKR,MAAMI,OAFlD,YACRK,EADQ,QAKDC,GALC,iCAMOD,EAASE,OANhB,OAMNA,EANM,OAQZ,EAAKC,SAAS,CACZX,SAAS,EACTC,MAAO,KACPC,QAASQ,EAAKR,QACdC,KAAM,EAAKJ,MAAMI,KAAO,IAZd,wBAeZ,EAAKQ,SAAS,CACZV,MAAO,eAhBG,4C,EAqBhBW,YAAc,SAACC,GACbA,EAAMC,iBAEN,EAAKT,iB,EAGPU,a,uCAAe,WAAOF,GAAP,mBAAAP,EAAA,6DACPU,EAAQH,EAAMI,OAAOC,MADd,SAGUX,MAAM,mDAAD,OACyBS,IAJxC,YAGPR,EAHO,QAOAC,GAPA,iCAQQD,EAASE,OARjB,OAQLA,EARK,OAUX,EAAKC,SAAS,CACZX,SAAS,EACTC,MAAO,KACPC,QAASQ,EAAKR,UAbL,wBAgBX,EAAKS,SAAS,CACZV,MAAO,eAjBE,4C,6GAsBL,IAAD,EAC6BxB,KAAKsB,MAAjCC,EADD,EACCA,QAASC,EADV,EACUA,MAAOC,EADjB,EACiBA,QAExB,OAAIF,GAAqB,OAAVC,EACN,0CAGLA,EAEA,yCACa,IACX,0BAAMkB,KAAK,MAAMC,aAAW,SAA5B,iBAQJ,kBAAC,IAAMhC,SAAP,KACE,kBAAC,EAAD,CAAiBZ,SAAUC,KAAKsC,eAChC,6BAASxC,UAAU,mBACjB,kBAAC,EAAD,CAAeoB,KAAMO,KAEvB,yBAAK3B,UAAU,UACb,uBAAG8C,KAAK,IAAIC,QAAS7C,KAAKmC,aAA1B,sB,GAtFU7B,IAAMC,YCKNuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,a","file":"static/js/main.b29841b0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./styles/CharacterSearch.css\";\r\n\r\nclass CharacterSearch extends React.Component {\r\n  render() {\r\n    return (\r\n      <section className=\"CharacterSearch__container\">\r\n        <form>\r\n          <div>\r\n            <input\r\n              onChange={this.props.onChange}\r\n              type=\"search\"\r\n              name=\"query\"\r\n              id=\"query\"\r\n              placeholder=\"Search\"\r\n            />\r\n          </div>\r\n        </form>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CharacterSearch;\r\n","import React from \"react\";\r\n\r\nclass Character extends React.Component {\r\n  render() {\r\n    const character = this.props.info;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <article className=\"Character__Item\">\r\n          <div className=\"Character__Item-Photo\">\r\n            <img src={character.image} alt={character.name} />\r\n          </div>\r\n          <div className=\"Character__Item-Info\">\r\n            <h2>{character.name}</h2>\r\n            <span>{character.status}</span> - <span>{character.species}</span>\r\n          </div>\r\n        </article>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Character;\r\n","import React from \"react\";\r\n\r\nimport Character from \"./Character\";\r\n\r\nclass CharacterList extends React.Component {\r\n  render() {\r\n    const { data } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {data.map((character) => {\r\n          return (\r\n            <div key={character.id}>\r\n              <Character info={character} />\r\n            </div>\r\n          );\r\n        })}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CharacterList;\r\n","import React from \"react\";\r\n\r\nimport CharacterSearch from \"../components/CharacterSearch\";\r\nimport CharacterList from \"../components/CharacterList\";\r\n\r\nimport \"./styles/Index.css\";\r\n\r\nclass Index extends React.Component {\r\n  state = {\r\n    loading: true,\r\n    error: null,\r\n    results: [],\r\n    page: 1,\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.getCharacters();\r\n  };\r\n\r\n  getCharacters = async () => {\r\n    const response = await fetch(\r\n      `https://rickandmortyapi.com/api/character/?page=${this.state.page}`\r\n    );\r\n\r\n    if (response.ok) {\r\n      const json = await response.json();\r\n\r\n      this.setState({\r\n        loading: false,\r\n        error: null,\r\n        results: json.results,\r\n        page: this.state.page + 1,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        error: \"Not found!\",\r\n      });\r\n    }\r\n  };\r\n\r\n  handleClick = (event) => {\r\n    event.preventDefault();\r\n\r\n    this.getCharacters();\r\n  };\r\n\r\n  handleChange = async (event) => {\r\n    const query = event.target.value;\r\n\r\n    const response = await fetch(\r\n      `https://rickandmortyapi.com/api/character/?name=${query}`\r\n    );\r\n\r\n    if (response.ok) {\r\n      const json = await response.json();\r\n\r\n      this.setState({\r\n        loading: false,\r\n        error: null,\r\n        results: json.results,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        error: \"Not found!\",\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { loading, error, results } = this.state;\r\n\r\n    if (loading && error === null) {\r\n      return <h1>Loading...</h1>;\r\n    }\r\n\r\n    if (error) {\r\n      return (\r\n        <h1>\r\n          Not found!{\" \"}\r\n          <span role=\"img\" aria-label=\"emoji\">\r\n            ðŸ˜¢\r\n          </span>\r\n        </h1>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <CharacterSearch onChange={this.handleChange} />\r\n        <section className=\"Character__List\">\r\n          <CharacterList data={results} />\r\n        </section>\r\n        <div className=\"Button\">\r\n          <a href=\"/\" onClick={this.handleClick}>\r\n            Load more...\r\n          </a>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Index;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import './index.css';\n// import App from './App';\nimport Index from \"./pages/Index\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Index />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}